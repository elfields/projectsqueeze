{"ast":null,"code":"var _jsxFileName = \"/Users/emmafields/Documents/Coding/CFG_Degree/Specialisation/project/fullstack-flamingos/squeeze/src/components/Modal/GenreModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./Modal.css\";\nimport ToggleSwitch from \"../ToggleSwitch/ToggleSwitch\";\nimport GenreButton from \"../GenreButton/GenreButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genreButtons = [{\n  id: 88,\n  title: \"Health\"\n}, {\n  id: 134,\n  title: \"Music\"\n}, {\n  id: 135,\n  title: \"True Crime\"\n}, {\n  id: 133,\n  title: \"Comedy\"\n}, {\n  id: 68,\n  title: \"TV / Film\"\n}, {\n  id: 111,\n  title: \"Education\"\n}, {\n  id: 107,\n  title: \"Science\"\n}, {\n  id: 99,\n  title: \"News\"\n}, {\n  id: 168,\n  title: \"Fiction\"\n}];\n\nconst GenreModal = _ref => {\n  _s();\n\n  let {\n    nextScreen,\n    onClose\n  } = _ref;\n  const [genres, setGenres] = useState([]);\n  const [isAnyCategory, setIsAnyCategory] = useState(false);\n\n  const onChangeIsAnyCategory = () => setIsAnyCategory(!isAnyCategory); // Function setup to pass Genre ID's for selected buttons over to API call\n\n\n  function toggleGenre(genrebuttonid) {\n    setGenres(previous => {\n      return previous.includes(genrebuttonid) ? previous.filter(genre => genre !== genrebuttonid) : [...previous, genrebuttonid];\n    });\n  } // Handling communication between modal screens\n\n\n  function handleSubmit() {\n    if (isAnyCategory) {\n      return nextScreen({\n        genres: []\n      });\n    }\n\n    nextScreen({\n      genres\n    });\n  }\n\n  return (\n    /*#__PURE__*/\n    // Main Modal Window CSS to implement styling to background page\n    _jsxDEV(\"div\", {\n      className: \"main-modal-window\",\n      tabIndex: -1,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"close-container\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            onClick: onClose,\n            version: \"1.1\",\n            className: \"close-icon\",\n            x: \"0px\",\n            y: \"0px\",\n            viewBox: \"0 0 47.971 47.971\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 125\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-modal-header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-modal-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"main-modal-title\",\n            children: \"Select your preferred category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"genre-toggle-container\",\n            children: /*#__PURE__*/_jsxDEV(ToggleSwitch, {\n              label: \"Any category\",\n              onToggle: onChangeIsAnyCategory,\n              value: isAnyCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"choose-genre\",\n            children: \"Or you can choose up to 3 categories:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"genre-button-container\",\n            children: genreButtons.map(_ref2 => {\n              let {\n                id,\n                title\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(GenreButton, {\n                onClick: toggleGenre,\n                id: id,\n                title: title,\n                disabled: isAnyCategory\n              }, id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: handleSubmit,\n            className: \"button\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-modal-footer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(GenreModal, \"h9KzJq3e8vUjAMDtu/B+doVxMRY=\");\n\n_c = GenreModal;\nexport default GenreModal; // Part of Toggle All and disable buttons\n// import React from \"react\";\n// import \"./modal.css\";\n// import ToggleSwitch from \"../ToggleSwitch/ToggleSwitch\";\n// import GenreButton from \"../GenreButton/GenreButton\";\n// class GenreModal extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             Horror: false,\n//             Genre1: false,\n//             Genre2: false,\n//             Genre3: false,\n//             Genre4: false,\n//             Genre5: false,\n//             Genre6: false,\n//             Genre7: false,\n//             Genre8: false,\n//             selectedCount: 0,\n//         }\n//     }\n//     isSelected(name) {\n//         return this.state[name];\n//     }\n//     toggleSelection(buttonName) {\n//         let prev = this.state[buttonName];\n//         // if isMaxed == true we are at our limit so do nothing is prev == false\n//         let newCount = 0;\n//         if (prev) {\n//             newCount = this.state.selectedCount -1;\n//         } else {\n//             newCount = this.state.selectedCount +1;\n//         }\n//         this.setState({ [buttonName]: !prev, selectedCount: newCount });\n//     }\n//     toggleswitchall(value) {\n//         this.setState({\n//             Horror: value,\n//             Genre1: value,\n//             Genre2: value,\n//             Genre3: value,\n//             Genre4: value,\n//             Genre5: value,\n//             Genre6: value,\n//             Genre7: value,\n//             Genre8: value,\n//         })\n//     }\n//     render() {\n//         const isMaxed = () => {\n//             return this.state.selectedCount === 3;\n//         }   \n//         return (\n//             <div className=\"main-modal-window\">\n//                 <div className=\"main-modal-content\">\n//                     {/* Close Icon */}\n//                     <div className=\"close-container\">\n//                         <svg onClick={this.props.onClose} version=\"1.1\" className=\"close-icon\" x=\"0px\" y=\"0px\" viewBox=\"0 0 47.971 47.971\"><path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"/></svg>\n//                     </div>\n//                     {/* Header space in Modal */}\n//                     <div className=\"main-modal-header\">\n//                     </div>\n//                     {/* Main content of modal */}\n//                     <div className=\"main-modal-body\">\n//                         <h3 className=\"main-modal-title\">Select your preferred category:</h3>\n//                         <ToggleSwitch className='genretoggle' toggleswitchall={(val) => this.toggleswitchall(val)} />\n//                         <p id='choosegenre'>Or you can choose up to 3 categories:</p>\n//                         <div className='genrebuttoncontainer'>\n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Horror\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre1\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre2\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre3\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre4\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre5\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre6\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre7\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre8\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/>                             \n//                         </div>\n//                         <button type=\"submit\" isMaxed={isMaxed()} onClick={this.props.nextScreen} className=\"next-button\">Next</button>\n//                     </div>\n//                     <div className=\"main-modal-footer\">\n//                     </div>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// export default GenreModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreModal\");","map":{"version":3,"names":["React","useState","ToggleSwitch","GenreButton","genreButtons","id","title","GenreModal","nextScreen","onClose","genres","setGenres","isAnyCategory","setIsAnyCategory","onChangeIsAnyCategory","toggleGenre","genrebuttonid","previous","includes","filter","genre","handleSubmit","map"],"sources":["/Users/emmafields/Documents/Coding/CFG_Degree/Specialisation/project/fullstack-flamingos/squeeze/src/components/Modal/GenreModal.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Modal.css\";\nimport ToggleSwitch from \"../ToggleSwitch/ToggleSwitch\";\nimport GenreButton from \"../GenreButton/GenreButton\";\n\nconst genreButtons = [\n    {id: 88, title: \"Health\"},\n    {id: 134, title: \"Music\"},\n    {id: 135, title: \"True Crime\"},\n    {id: 133, title: \"Comedy\"},\n    {id: 68, title: \"TV / Film\"},\n    {id: 111, title: \"Education\"},\n    {id: 107, title: \"Science\"},\n    {id: 99, title: \"News\"},\n    {id: 168, title: \"Fiction\"}\n];\n\nconst GenreModal = ({nextScreen, onClose}) => {\n    const[genres,setGenres]= useState([])\n    const [isAnyCategory, setIsAnyCategory] = useState(false);\n    \n    const onChangeIsAnyCategory = () => setIsAnyCategory(!isAnyCategory);\n\n    // Function setup to pass Genre ID's for selected buttons over to API call\n    function toggleGenre(genrebuttonid){\n        setGenres(previous => {\n            return previous.includes(genrebuttonid)\n            ? previous.filter(genre => genre!==genrebuttonid)\n            :[...previous, genrebuttonid ]\n        })\n    }\n\n    // Handling communication between modal screens\n    function handleSubmit(){\n        if(isAnyCategory){\n            return nextScreen({genres:[]})\n        }\n        nextScreen({genres})\n    }\n\n    return (\n        // Main Modal Window CSS to implement styling to background page\n        <div className=\"main-modal-window\" tabIndex={-1}>\n\n            {/* Style for the modal's content */}\n            <div className=\"main-modal-content\">\n\n                {/* Close Icon */}\n                <div className=\"close-container\">\n                    <svg onClick={onClose} version=\"1.1\" className=\"close-icon\" x=\"0px\" y=\"0px\" viewBox=\"0 0 47.971 47.971\"><path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"/></svg>\n                </div>\n                \n                {/* Header space in Modal */}\n                <div className=\"main-modal-header\">\n\n                </div>\n\n                {/* Main content of modal for user interaction */}\n                <div className=\"main-modal-body\">\n                    \n                    <h3 className=\"main-modal-title\">Select your preferred category:</h3>\n\n                    <div className='genre-toggle-container'>\n                        <ToggleSwitch \n                            label=\"Any category\" \n                            onToggle={onChangeIsAnyCategory}\n                            value={isAnyCategory}\n                        />\n                    </div>\n\n                    <p id='choose-genre'>Or you can choose up to 3 categories:</p>\n\n                    {/* Genre buttons which then feed into the Podcast Recommendation Screen */}\n                    <div className='genre-button-container'>\n                        {genreButtons.map(({id,title}) => ( \n                            <GenreButton \n                                key={id}\n                                onClick={toggleGenre} \n                                id={id} \n                                title={title}\n                                disabled={isAnyCategory}\n                            /> \n                        ))}\n                    </div>\n\n                    {/* Button which leads user from Genre to Time selection modal */}\n                    <button type=\"submit\" onClick={handleSubmit} className=\"button\">Next</button>\n\n                </div>\n\n                <div className=\"main-modal-footer\"></div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default GenreModal;\n\n\n\n\n\n\n// Part of Toggle All and disable buttons\n\n// import React from \"react\";\n// import \"./modal.css\";\n// import ToggleSwitch from \"../ToggleSwitch/ToggleSwitch\";\n// import GenreButton from \"../GenreButton/GenreButton\";\n\n// class GenreModal extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             Horror: false,\n//             Genre1: false,\n//             Genre2: false,\n//             Genre3: false,\n//             Genre4: false,\n//             Genre5: false,\n//             Genre6: false,\n//             Genre7: false,\n//             Genre8: false,\n//             selectedCount: 0,\n//         }\n//     }\n\n//     isSelected(name) {\n//         return this.state[name];\n//     }\n\n//     toggleSelection(buttonName) {\n//         let prev = this.state[buttonName];\n//         // if isMaxed == true we are at our limit so do nothing is prev == false\n//         let newCount = 0;\n\n//         if (prev) {\n//             newCount = this.state.selectedCount -1;\n//         } else {\n//             newCount = this.state.selectedCount +1;\n//         }\n\n//         this.setState({ [buttonName]: !prev, selectedCount: newCount });\n//     }\n\n//     toggleswitchall(value) {\n//         this.setState({\n//             Horror: value,\n//             Genre1: value,\n//             Genre2: value,\n//             Genre3: value,\n//             Genre4: value,\n//             Genre5: value,\n//             Genre6: value,\n//             Genre7: value,\n//             Genre8: value,\n//         })\n//     }\n \n//     render() {\n//         const isMaxed = () => {\n//             return this.state.selectedCount === 3;\n//         }   \n//         return (\n//             <div className=\"main-modal-window\">\n\n//                 <div className=\"main-modal-content\">\n\n//                     {/* Close Icon */}\n//                     <div className=\"close-container\">\n//                         <svg onClick={this.props.onClose} version=\"1.1\" className=\"close-icon\" x=\"0px\" y=\"0px\" viewBox=\"0 0 47.971 47.971\"><path d=\"M28.228,23.986L47.092,5.122c1.172-1.171,1.172-3.071,0-4.242c-1.172-1.172-3.07-1.172-4.242,0L23.986,19.744L5.121,0.88c-1.172-1.172-3.07-1.172-4.242,0c-1.172,1.171-1.172,3.071,0,4.242l18.865,18.864L0.879,42.85c-1.172,1.171-1.172,3.071,0,4.242C1.465,47.677,2.233,47.97,3,47.97s1.535-0.293,2.121-0.879l18.865-18.864L42.85,47.091c0.586,0.586,1.354,0.879,2.121,0.879s1.535-0.293,2.121-0.879c1.172-1.171,1.172-3.071,0-4.242L28.228,23.986z\"/></svg>\n//                     </div>\n                    \n//                     {/* Header space in Modal */}\n//                     <div className=\"main-modal-header\">\n\n//                     </div>\n\n//                     {/* Main content of modal */}\n//                     <div className=\"main-modal-body\">\n                        \n                        \n//                         <h3 className=\"main-modal-title\">Select your preferred category:</h3>\n\n//                         <ToggleSwitch className='genretoggle' toggleswitchall={(val) => this.toggleswitchall(val)} />\n\n\n//                         <p id='choosegenre'>Or you can choose up to 3 categories:</p>\n\n//                         <div className='genrebuttoncontainer'>\n                            \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Horror\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre1\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre2\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre3\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre4\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre5\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre6\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre7\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/> \n//                             <GenreButton buttonname=\"Genre\" genrebuttontitle=\"Genre8\" isMaxed={isMaxed()} isSelected={(name) => this.isSelected(name)} toggle={(name) => this.toggleSelection(name)}/>                             \n//                         </div>\n\n//                         <button type=\"submit\" isMaxed={isMaxed()} onClick={this.props.nextScreen} className=\"next-button\">Next</button>\n\n//                     </div>\n\n//                     <div className=\"main-modal-footer\">\n\n//                     </div>\n\n//                 </div>\n\n//             </div>\n//         );\n//     }\n// }\n\n// export default GenreModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}